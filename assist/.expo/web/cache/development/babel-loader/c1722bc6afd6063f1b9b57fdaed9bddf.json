{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/mayank/Study/TPE/h1/assist-learning/assist/node_modules/react-native-d3-tree-graph/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Svg, { Circle, G, Path, Text, Rect } from 'react-native-svg';\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport { flatten } from \"./FlatNodes\";\nimport { NodeCurves } from \"./ConstructCurves\";\nimport { DeployNodes } from \"./DeployNodes\";\nimport { SiblingCurves } from \"./SiblingCurves\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nvar margin = {\n  top: 10,\n  right: 10,\n  bottom: 10,\n  left: 10\n},\n    curves,\n    siblingpath,\n    rectNodes;\n\nvar AwesomeHierarchyGraph = function (_Component) {\n  _inherits(AwesomeHierarchyGraph, _Component);\n\n  var _super = _createSuper(AwesomeHierarchyGraph);\n\n  function AwesomeHierarchyGraph(props) {\n    var _this;\n\n    _classCallCheck(this, AwesomeHierarchyGraph);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      scale: new Animated.Value(0)\n    };\n    _this.animate = _this.animate.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AwesomeHierarchyGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate();\n    }\n  }, {\n    key: \"drawTree\",\n    value: function drawTree() {\n      var _this$props = this.props,\n          root = _this$props.root,\n          siblings = _this$props.siblings;\n      var allNodes = flatten(root);\n      var tree = d3.layout.tree().size([1000, height]),\n          nodes = tree.nodes(root),\n          links = tree.links(nodes);\n      curves = NodeCurves(links);\n      siblingpath = SiblingCurves(siblings, allNodes);\n      rectNodes = DeployNodes(nodes);\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      Animated.stagger(10, [Animated.timing(this.state.scale, {\n        toValue: 1,\n        duration: 5000\n      })]).start(this.animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.drawTree();\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: this.state.scale\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        horizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, React.createElement(Svg, {\n        width: 1000,\n        height: 1000,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      }, React.createElement(G, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, siblingpath, rectNodes, curves))))));\n    }\n  }]);\n\n  return AwesomeHierarchyGraph;\n}(Component);\n\nexport { AwesomeHierarchyGraph as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["/home/mayank/Study/TPE/h1/assist-learning/assist/node_modules/react-native-d3-tree-graph/index.js"],"names":["React","Component","Svg","Circle","G","Path","Text","Rect","d3","_","flatten","NodeCurves","DeployNodes","SiblingCurves","Dimensions","get","height","width","margin","top","right","bottom","left","curves","siblingpath","rectNodes","AwesomeHierarchyGraph","props","state","scale","Animated","Value","animate","bind","root","siblings","allNodes","tree","layout","size","nodes","links","stagger","timing","toValue","duration","start","drawTree","opacity","styles","StyleSheet","create","container","flex","justifyContent","alignItems","backgroundColor","welcome","fontSize","textAlign","instructions","color","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n  ScrollView,\n  Dimensions,\n  Animated\n} from 'react-native';\n\nimport Svg,{ Circle, G, Path, Text, Rect } from 'react-native-svg'\nimport * as d3 from \"d3\";\nimport _ from 'lodash'\nimport { flatten } from './FlatNodes'\nimport { NodeCurves } from './ConstructCurves'\nimport { DeployNodes } from './DeployNodes'\nimport { SiblingCurves } from './SiblingCurves'\n\n\nvar {height, width} = Dimensions.get('window');\nvar margin = {\ntop: 10,\nright: 10,\nbottom: 10,\nleft: 10\n},\ncurves,siblingpath,rectNodes\n\nexport default class AwesomeHierarchyGraph extends Component {\n  \nconstructor (props) {\n  super(props);\n  this.state = {\n    scale: new Animated.Value(0)\n  }\n  this.animate = this.animate.bind(this);\n}\n    \ncomponentDidMount() {\n this.animate();\n}\n\ndrawTree()\n{\n    const { root, siblings } = this.props\n\n  var allNodes = flatten(root);\n\n  var tree = d3.layout.tree().size([1000, height]),\n      nodes = tree.nodes(root),\n      links = tree.links(nodes);\n      \n  curves = NodeCurves(links)\n  siblingpath = SiblingCurves(siblings,allNodes)\n  rectNodes = DeployNodes(nodes)    \n}\n\nanimate() {\nAnimated.stagger(10,[\n  Animated.timing(this.state.scale,\n    {\n      toValue:1,\n      duration:5000\n    })\n]).start(this.animate)\n}\n  \n  render() {\n      this.drawTree()\n    return (\n      <View>\n      <Animated.View style={{opacity: this.state.scale}}>\n      <ScrollView>\n      <ScrollView horizontal>\n        <Svg width={1000} height={1000}>\n            <G>\n                { siblingpath }\n                { rectNodes }\n                { curves }                \n            </G>\n        </Svg>\n     </ScrollView>      \n     </ScrollView>\n     </Animated.View>\n    </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}