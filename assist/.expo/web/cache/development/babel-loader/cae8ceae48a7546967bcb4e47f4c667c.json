{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { parse, Mixed } from \"./parser\";\nimport { verifyChildrenProp, verifyTextStylesProp, verifyTextStyles } from \"./utils\";\nvar defaultStyles = {\n  b: {\n    fontWeight: 'bold'\n  },\n  i: {\n    fontStyle: 'italic'\n  },\n  u: {\n    textDecorationLine: 'underline'\n  }\n};\n\nvar renderMixedText = function renderMixedText(mixedText, textStyles) {\n  return mixedText.map(function (element, index) {\n    return typeof element === 'string' || element === undefined || element === null ? element : React.createElement(Text, {\n      style: textStyles[element.styleName] || defaultStyles[element.styleName],\n      key: index\n    }, renderMixedText(element.mixedText, textStyles));\n  });\n};\n\nexport var renderStyledText = function renderStyledText(children, textStyles, textProps) {\n  var text = verifyChildrenProp(children) ? children : undefined;\n  var styles = verifyTextStylesProp(textStyles) ? textStyles || {} : {};\n  var mixedText = parse(text);\n  verifyTextStyles(mixedText, styles, defaultStyles);\n  var textElements = renderMixedText(mixedText, styles);\n  return React.createElement.apply(React, [Text, textProps].concat(_toConsumableArray(textElements)));\n};","map":{"version":3,"sources":["/home/mayank/Study/TPE/h1/assist-learning/assist/node_modules/react-native-styled-text/StyledText/renderer.js"],"names":["React","parse","Mixed","verifyChildrenProp","verifyTextStylesProp","verifyTextStyles","defaultStyles","b","fontWeight","i","fontStyle","u","textDecorationLine","renderMixedText","mixedText","textStyles","map","element","index","undefined","createElement","Text","style","styleName","key","renderStyledText","children","textProps","text","styles","textElements"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,KAAT,EAAgBC,KAAhB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,gBAAnD;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,CAAC,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX,GADiB;AAIpBC,EAAAA,CAAC,EAAE;AACDC,IAAAA,SAAS,EAAE;AADV,GAJiB;AAOpBC,EAAAA,CAAC,EAAE;AACDC,IAAAA,kBAAkB,EAAE;AADnB;AAPiB,CAAtB;;AAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAmBC,UAAnB;AAAA,SAA0CD,SAAS,CAACE,GAAV,CAAc,UAACC,OAAD,EAAUC,KAAV;AAAA,WAC9E,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAKE,SAA3C,IAAwDF,OAAO,KAAK,IAApE,GACIA,OADJ,GAEIjB,KAAK,CAACoB,aAAN,CACAC,IADA,EAEA;AACEC,MAAAA,KAAK,EAAEP,UAAU,CAACE,OAAO,CAACM,SAAT,CAAV,IAAiCjB,aAAa,CAACW,OAAO,CAACM,SAAT,CADvD;AAEEC,MAAAA,GAAG,EAAEN;AAFP,KAFA,EAMAL,eAAe,CAACI,OAAO,CAACH,SAAT,EAAoBC,UAApB,CANf,CAH0E;AAAA,GAAd,CAA1C;AAAA,CAAxB;;AAaA,OAAO,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAWX,UAAX,EAAuBY,SAAvB,EAAqC;AACnE,MAAMC,IAAI,GAAGzB,kBAAkB,CAACuB,QAAD,CAAlB,GAA+BA,QAA/B,GAA0CP,SAAvD;AACA,MAAMU,MAAM,GAAGzB,oBAAoB,CAACW,UAAD,CAApB,GAAoCA,UAAU,IAAI,EAAlD,GAAwD,EAAvE;AAEA,MAAMD,SAAS,GAAGb,KAAK,CAAC2B,IAAD,CAAvB;AACAvB,EAAAA,gBAAgB,CAACS,SAAD,EAAYe,MAAZ,EAAoBvB,aAApB,CAAhB;AAEA,MAAMwB,YAAY,GAAGjB,eAAe,CAACC,SAAD,EAAYe,MAAZ,CAApC;AAEA,SAAO7B,KAAK,CAACoB,aAAN,OAAApB,KAAK,GACVqB,IADU,EAEVM,SAFU,4BAGPG,YAHO,GAAZ;AAKD,CAdM","sourcesContent":["import * as React from 'react';\nimport { Text, StyleSheet } from 'react-native';\n\nimport { parse, Mixed } from './parser';\nimport { verifyChildrenProp, verifyTextStylesProp, verifyTextStyles } from './utils';\n\nconst defaultStyles = {\n  b: {\n    fontWeight: 'bold',\n  },\n  i: {\n    fontStyle: 'italic',\n  },\n  u: {\n    textDecorationLine: 'underline',\n  }\n};\n\nconst renderMixedText = (mixedText: Mixed, textStyles: Object) => mixedText.map((element, index) => (\n  typeof element === 'string' || element === undefined || element === null\n    ? element\n    : React.createElement(\n      Text,\n      { \n        style: textStyles[element.styleName] || defaultStyles[element.styleName], \n        key: index \n      },\n      renderMixedText(element.mixedText, textStyles),\n    )\n));\n\nexport const renderStyledText = (children, textStyles, textProps) => {\n  const text = verifyChildrenProp(children) ? children : undefined;\n  const styles = verifyTextStylesProp(textStyles) ? (textStyles || {}) : {}\n\n  const mixedText = parse(text);\n  verifyTextStyles(mixedText, styles, defaultStyles);\n\n  const textElements = renderMixedText(mixedText, styles);\n\n  return React.createElement(\n    Text,\n    textProps,\n    ...textElements,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}