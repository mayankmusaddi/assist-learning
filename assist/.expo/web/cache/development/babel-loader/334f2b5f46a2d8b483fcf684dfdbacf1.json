{"ast":null,"code":"import * as d3 from \"d3\";\nexport function JoinPaths(d) {\n  if (d.target.no_parent) {\n    return \"M0,0L0,0\";\n  }\n\n  var diff = d.source.y - d.target.y;\n  var ny = d.target.y + diff * 0.40;\n  linedata = [{\n    x: d.target.x,\n    y: d.target.y\n  }, {\n    x: d.target.x,\n    y: ny\n  }, {\n    x: d.source.x,\n    y: d.source.y\n  }];\n  var fun = d3.svg.line().x(function (d) {\n    return d.x;\n  }).y(function (d) {\n    return d.y;\n  }).interpolate(\"step-after\");\n  return fun(linedata);\n}","map":{"version":3,"sources":["/home/mayank/Study/TPE/h1/assist-learning/assist/node_modules/react-native-d3-tree-graph/ZigZagUtil.js"],"names":["d3","JoinPaths","d","target","no_parent","diff","source","y","ny","linedata","x","fun","svg","line","interpolate"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,OAAO,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACzB,MAAIA,CAAC,CAACC,MAAF,CAASC,SAAb,EAAwB;AACpB,WAAO,UAAP;AACH;;AACD,MAAIC,IAAI,GAAGH,CAAC,CAACI,MAAF,CAASC,CAAT,GAAaL,CAAC,CAACC,MAAF,CAASI,CAAjC;AAEA,MAAIC,EAAE,GAAGN,CAAC,CAACC,MAAF,CAASI,CAAT,GAAaF,IAAI,GAAG,IAA7B;AAEAI,EAAAA,QAAQ,GAAG,CAAC;AACRC,IAAAA,CAAC,EAAER,CAAC,CAACC,MAAF,CAASO,CADJ;AAERH,IAAAA,CAAC,EAAEL,CAAC,CAACC,MAAF,CAASI;AAFJ,GAAD,EAGR;AACCG,IAAAA,CAAC,EAAER,CAAC,CAACC,MAAF,CAASO,CADb;AAECH,IAAAA,CAAC,EAAEC;AAFJ,GAHQ,EAMR;AACCE,IAAAA,CAAC,EAAER,CAAC,CAACI,MAAF,CAASI,CADb;AAECH,IAAAA,CAAC,EAAEL,CAAC,CAACI,MAAF,CAASC;AAFb,GANQ,CAAX;AAWA,MAAII,GAAG,GAAGX,EAAE,CAACY,GAAH,CAAOC,IAAP,GAAcH,CAAd,CAAgB,UAAUR,CAAV,EAAa;AACnC,WAAOA,CAAC,CAACQ,CAAT;AACH,GAFS,EAEPH,CAFO,CAEL,UAAUL,CAAV,EAAa;AACd,WAAOA,CAAC,CAACK,CAAT;AACH,GAJS,EAIPO,WAJO,CAIK,YAJL,CAAV;AAKA,SAAOH,GAAG,CAACF,QAAD,CAAV;AACH","sourcesContent":["import * as d3 from \"d3\";\n\nexport function JoinPaths(d) {\n    if (d.target.no_parent) {\n        return \"M0,0L0,0\";\n    }\n    var diff = d.source.y - d.target.y;\n    //0.40 defines the point from where you need the line to break out change is as per your choice.\n    var ny = d.target.y + diff * 0.40;\n\n    linedata = [{\n        x: d.target.x,\n        y: d.target.y\n    }, {\n        x: d.target.x,\n        y: ny\n    }, {\n        x: d.source.x,\n        y: d.source.y\n    }]\n\n    var fun = d3.svg.line().x(function (d) {\n        return d.x;\n    }).y(function (d) {\n        return d.y;\n    }).interpolate(\"step-after\");\n    return fun(linedata);\n}"]},"metadata":{},"sourceType":"module"}