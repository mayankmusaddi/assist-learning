{"ast":null,"code":"import { Mixed } from \"./parser\";\n\nvar findAllTextStyles = function findAllTextStyles(mixedText) {\n  var accStyleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  mixedText.map(function (element) {\n    if (!(typeof element === 'string' || element === undefined || element === null)) {\n      var index = accStyleNames.indexOf(element.styleName);\n\n      if (index < 0) {\n        accStyleNames.push(element.styleName);\n      }\n\n      accStyleNames = findAllTextStyles(element.mixedText, accStyleNames);\n    }\n  });\n  return accStyleNames;\n};\n\nvar verifyChildrenProp = function verifyChildrenProp(children, textStyles) {\n  if (typeof children !== \"string\" && children !== undefined && children !== null) {\n    console.warn(\"react-native-styled-text: children must a string, undefined or null (\" + JSON.stringify(children) + \")\");\n    return false;\n  }\n\n  return true;\n};\n\nvar verifyTextStylesProp = function verifyTextStylesProp(textStyles) {\n  if (typeof textStyles !== \"object\" && textStyles !== undefined && textStyles !== null) {\n    console.warn(\"react-native-styled-text: textStyles must an object, undefined or null (\" + JSON.stringify(textStyles) + \")\");\n    return false;\n  }\n\n  return true;\n};\n\nvar verifyTextStyles = function verifyTextStyles(mixedText, textStyles, defaultStyles) {\n  var styleNames = findAllTextStyles(mixedText);\n  styleNames.forEach(function (styleName) {\n    if (!textStyles[styleName] && !defaultStyles[styleName]) {\n      console.warn('react-native-styled-text: style \"' + styleName + '\" is not defined');\n    }\n  });\n};\n\nexport { verifyChildrenProp, verifyTextStylesProp, verifyTextStyles };","map":{"version":3,"sources":["/home/mayank/Study/TPE/h1/assist-learning/assist/node_modules/react-native-styled-text/StyledText/utils.js"],"names":["Mixed","findAllTextStyles","mixedText","accStyleNames","map","element","undefined","index","indexOf","styleName","push","verifyChildrenProp","children","textStyles","console","warn","JSON","stringify","verifyTextStylesProp","verifyTextStyles","defaultStyles","styleNames","forEach"],"mappings":"AAAA,SAASA,KAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,SADwB,EAGL;AAAA,MADnBC,aACmB,uEADY,EACZ;AACnBD,EAAAA,SAAS,CAACE,GAAV,CAAc,UAAAC,OAAO,EAAI;AACvB,QAAI,EAAE,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAKC,SAA3C,IAAwDD,OAAO,KAAK,IAAtE,CAAJ,EAAiF;AAC/E,UAAME,KAAK,GAAGJ,aAAa,CAACK,OAAd,CAAsBH,OAAO,CAACI,SAA9B,CAAd;;AACA,UAAIF,KAAK,GAAG,CAAZ,EAAe;AACbJ,QAAAA,aAAa,CAACO,IAAd,CAAmBL,OAAO,CAACI,SAA3B;AACD;;AAEDN,MAAAA,aAAa,GAAGF,iBAAiB,CAACI,OAAO,CAACH,SAAT,EAAoBC,aAApB,CAAjC;AACD;AACF,GATD;AAWA,SAAOA,aAAP;AACD,CAhBD;;AAkBA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,QADyB,EAEzBC,UAFyB,EAGtB;AACH,MAAI,OAAOD,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAKN,SAA7C,IAA0DM,QAAQ,KAAK,IAA3E,EAAiF;AAC/EE,IAAAA,OAAO,CAACC,IAAR,2EAAqFC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAArF;AACA,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAVD;;AAYA,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BL,UAD2B,EAExB;AACH,MAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,KAAKP,SAAjD,IAA8DO,UAAU,KAAK,IAAjF,EAAuF;AACrFC,IAAAA,OAAO,CAACC,IAAR,8EAAwFC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAAxF;AACA,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CATD;;AAWA,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBjB,SADuB,EAEvBW,UAFuB,EAGvBO,aAHuB,EAIpB;AACH,MAAMC,UAAU,GAAGpB,iBAAiB,CAACC,SAAD,CAApC;AAEAmB,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAACb,SAAD,EAAe;AAChC,QAAI,CAACI,UAAU,CAACJ,SAAD,CAAX,IAA0B,CAACW,aAAa,CAACX,SAAD,CAA5C,EAAyD;AACxDK,MAAAA,OAAO,CAACC,IAAR,CAAa,sCAAsCN,SAAtC,GAAkD,kBAA/D;AACA;AACF,GAJD;AAKD,CAZD;;AAcA,SAASE,kBAAT,EAA6BO,oBAA7B,EAAmDC,gBAAnD","sourcesContent":["import { Mixed } from './parser';\n\nconst findAllTextStyles = (\n  mixedText: Mixed, \n  accStyleNames: Array<string> = []\n) : Array<string> => {\n  mixedText.map(element => {\n    if (!(typeof element === 'string' || element === undefined || element === null)) {\n      const index = accStyleNames.indexOf(element.styleName);\n      if (index < 0) {\n        accStyleNames.push(element.styleName);\n      }\n \n      accStyleNames = findAllTextStyles(element.mixedText, accStyleNames);\n    }\n  });\n\n  return accStyleNames;\n}\n\nconst verifyChildrenProp = (\n  children: string, \n  textStyles: Object\n) => {\n  if (typeof children !== \"string\" && children !== undefined && children !== null) {\n    console.warn(`react-native-styled-text: children must a string, undefined or null (${JSON.stringify(children)})`);\n    return false;\n  }\n\n  return true;\n}\n\nconst verifyTextStylesProp = (\n  textStyles: Object\n) => {\n  if (typeof textStyles !== \"object\" && textStyles !== undefined && textStyles !== null) {\n    console.warn(`react-native-styled-text: textStyles must an object, undefined or null (${JSON.stringify(textStyles)})`);\n    return false;\n  }\n\n  return true;\n}\n\nconst verifyTextStyles = (\n  mixedText: Mixed, \n  textStyles: Object, \n  defaultStyles: Object\n) => {\n  const styleNames = findAllTextStyles(mixedText);\n   \n  styleNames.forEach((styleName) => {\n    if (!textStyles[styleName] && !defaultStyles[styleName]) {\n  \t  console.warn('react-native-styled-text: style \"' + styleName + '\" is not defined');\n    }\n  });\n}\n  \nexport { verifyChildrenProp, verifyTextStylesProp, verifyTextStyles };"]},"metadata":{},"sourceType":"module"}